; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"0.9.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.27.4"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉getting-clojure.core꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉getting-clojure.core꞉> 
#'getting-clojure.core/print-greeting
clj꞉getting-clojure.core꞉> 
Welcome back to Blotts Books!
nil
clj꞉getting-clojure.core꞉> 
#'getting-clojure.core/print-greeting
clj꞉getting-clojure.core꞉> 
Welcome back to Blotts Books!
nil
clj꞉getting-clojure.core꞉> 
Welcome to Botts Books!
nil
clj꞉getting-clojure.core꞉> 
#'getting-clojure.core/shipping-charge
clj꞉getting-clojure.core꞉> 
0.0
clj꞉getting-clojure.core꞉> 
0.0
clj꞉getting-clojure.core꞉> 
10.0
clj꞉getting-clojure.core꞉> 
true
clj꞉getting-clojure.core꞉> 
true
clj꞉getting-clojure.core꞉> 
false
clj꞉getting-clojure.core꞉> 
true
clj꞉getting-clojure.core꞉> 
true
clj꞉getting-clojure.core꞉> 
false
clj꞉getting-clojure.core꞉> 
true
clj꞉getting-clojure.core꞉> 
false
clj꞉getting-clojure.core꞉> 
3 is bigger than 1
nil
clj꞉getting-clojure.core꞉> 
1 is lower than 3
nil
clj꞉getting-clojure.core꞉> 
1 is smaller than 3
nil
clj꞉getting-clojure.core꞉> 
true
clj꞉getting-clojure.core꞉> 
false
clj꞉getting-clojure.core꞉> 
true
clj꞉getting-clojure.core꞉> 
false
clj꞉getting-clojure.core꞉> 
false
clj꞉getting-clojure.core꞉> 
true
clj꞉getting-clojure.core꞉> 
false
clj꞉getting-clojure.core꞉> 
true
clj꞉getting-clojure.core꞉> 
#'getting-clojure.core/shipping-surcharge?
clj꞉getting-clojure.core꞉> 
"I like science fiction"
clj꞉getting-clojure.core꞉> 
"I like science fiction"
clj꞉getting-clojure.core꞉> 
"I like science fiction"
clj꞉getting-clojure.core꞉> 
"I like mysteries!"
clj꞉getting-clojure.core꞉> 
"yes"
clj꞉getting-clojure.core꞉> 
"yes"
clj꞉getting-clojure.core꞉> 
"yes"
clj꞉getting-clojure.core꞉> 
"yes"
clj꞉getting-clojure.core꞉> 
"yes"
clj꞉getting-clojure.core꞉> 
"yes"
clj꞉getting-clojure.core꞉> 
"yes"
clj꞉getting-clojure.core꞉> 
"yes"
clj꞉getting-clojure.core꞉> 
"yes"
clj꞉getting-clojure.core꞉> 
An empty vector is true!
nil
clj꞉getting-clojure.core꞉> 
So is a populated vector!
nil
clj꞉getting-clojure.core꞉> 
An empty map is true!
nil
clj꞉getting-clojure.core꞉> 
So is a full map!
nil
clj꞉getting-clojure.core꞉> 
An empty list is true!
nil
clj꞉getting-clojure.core꞉> 
An empty list is true!
nil
clj꞉getting-clojure.core꞉> 
So is a full list!
nil
clj꞉getting-clojure.core꞉> 
This is four expression.
All grouped together as one
That prints some stuff and then evaluates to 44
44
clj꞉getting-clojure.core꞉> 
#'getting-clojure.core/shipping-charge
clj꞉getting-clojure.core꞉> 
Hello returning customer!
Welcome back to Blotts Books!
nil
clj꞉getting-clojure.core꞉> 
#'getting-clojure.core/shipping-charge
clj꞉getting-clojure.core꞉> 
#'getting-clojure.core/shipping-charge
clj꞉getting-clojure.core꞉> 
#'getting-clojure.core/shipping-charge
clj꞉getting-clojure.core꞉> 
#'getting-clojure.core/shipping-charge
clj꞉getting-clojure.core꞉> 
#'getting-clojure.core/customer-greeting
clj꞉getting-clojure.core꞉> 
"Welcome, welcome, welcome back!!!"
clj꞉getting-clojure.core꞉> 
"Welcome back!"
clj꞉getting-clojure.core꞉> 
"Welcome to Blotts Books"
clj꞉getting-clojure.core꞉> 
#'getting-clojure.core/publish-book
clj꞉getting-clojure.core꞉> 
1984
clj꞉getting-clojure.core꞉> 
"Emma"
clj꞉getting-clojure.core꞉> 
nil
clj꞉getting-clojure.core꞉> 
"ok"
clj꞉getting-clojure.core꞉> 
